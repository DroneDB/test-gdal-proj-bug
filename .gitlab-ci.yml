stages:
  - build
  - test

variables:
  CMAKE_BUILD_TYPE: "Release"

# Cache configuration for vcpkg packages
.cache_vcpkg_windows: &cache_vcpkg_windows
  cache:
    key: "vcpkg-windows-$CI_COMMIT_REF_SLUG"
    paths:
      - C:\vcpkg\installed\
      - C:\vcpkg\buildtrees\
      - C:\vcpkg\downloads\
    policy: pull-push

.cache_vcpkg_linux: &cache_vcpkg_linux
  cache:
    key: "vcpkg-linux-$CI_COMMIT_REF_SLUG"
    paths:
      - /vcpkg/installed/
      - /vcpkg/buildtrees/
      - /vcpkg/downloads/
    policy: pull-push

# Windows build configuration (native Windows 10 runner)
.windows_template: &windows_template
  tags:
    - windows
    - shell
  <<: *cache_vcpkg_windows
  variables:
    VCPKG_ROOT: "C:\\vcpkg"
  before_script:
    # Check if vcpkg exists, if not clone it
    - if (!(Test-Path "C:\vcpkg")) { git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg }
    # Bootstrap vcpkg if not already done
    - if (!(Test-Path "C:\vcpkg\vcpkg.exe")) { C:\vcpkg\bootstrap-vcpkg.bat }
    - $env:VCPKG_ROOT = "C:\vcpkg"
    - $env:PATH += ";C:\vcpkg"

# Linux build configuration
.linux_template: &linux_template
  image: ubuntu:24.04
  <<: *cache_vcpkg_linux
  variables:
    VCPKG_ROOT: "/vcpkg"
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl zip unzip tar cmake build-essential pkg-config
    # Check if vcpkg exists, if not clone it
    - if [ ! -d "/vcpkg" ]; then git clone https://github.com/Microsoft/vcpkg.git /vcpkg; fi
    # Bootstrap vcpkg if not already done
    - if [ ! -f "/vcpkg/vcpkg" ]; then /vcpkg/bootstrap-vcpkg.sh; fi
    - export VCPKG_ROOT=/vcpkg
    - export PATH=$PATH:/vcpkg

build_windows:
  <<: *windows_template
  stage: build
  script:
    # Configure the project with vcpkg
    - cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=Release
    # Build the project
    - cmake --build build --config Release
  artifacts:
    paths:
      - build/Release/
    expire_in: 1 hour
  only:
    - master
    - main
    - merge_requests

test_windows:
  <<: *windows_template
  stage: test
  dependencies:
    - build_windows
  script:
    # Change to build directory and run the test
    - cd build\Release
    # Ensure all required files are present
    - if (!(Test-Path "testcmd.exe")) { throw "Test executable not found!" }
    - if (!(Test-Path "wro.tif")) { throw "Test data file wro.tif not found!" }
    - if (!(Test-Path "proj.db")) { throw "PROJ database file not found!" }
    # Run the actual test
    - echo "Running GDAL-PROJ test..."
    - .\testcmd.exe
    # Check the exit code
    - if ($LASTEXITCODE -ne 0) { throw "Test failed with exit code $LASTEXITCODE" }
    - echo "Test completed successfully!"
  only:
    - master
    - main
    - merge_requests

# Linux build and test
build_linux:
  <<: *linux_template
  stage: build
  script:
    - cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release
    - cmake --build build --config Release
  artifacts:
    paths:
      - build/Release/
    expire_in: 1 hour
  only:
    - master
    - main
    - merge_requests

test_linux:
  <<: *linux_template
  stage: test
  dependencies:
    - build_linux
  script:
    - cd build/Release
    - ls -la
    - echo "Running GDAL-PROJ test..."
    - ./testcmd
    - echo "Test completed successfully!"
  only:
    - master
    - main
    - merge_requests
